ARM GAS  C:\Users\jthem\AppData\Local\Temp\ccm5o87D.s 			page 1


   1              		.syntax unified
   2              		.cpu cortex-m3
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 6
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.thumb
  14              		.file	"SPIS_INT.c"
  15              		.text
  16              	.Ltext0:
  17              		.cfi_sections	.debug_frame
  18              		.section	.text.SPIS_TX_ISR,"ax",%progbits
  19              		.align	2
  20              		.global	SPIS_TX_ISR
  21              		.thumb
  22              		.thumb_func
  23              		.type	SPIS_TX_ISR, %function
  24              	SPIS_TX_ISR:
  25              	.LFB0:
  26              		.file 1 ".\\Generated_Source\\PSoC5\\SPIS_INT.c"
   1:.\Generated_Source\PSoC5/SPIS_INT.c **** /*******************************************************************************
   2:.\Generated_Source\PSoC5/SPIS_INT.c **** * File Name: SPIS_INT.c
   3:.\Generated_Source\PSoC5/SPIS_INT.c **** * Version 2.70
   4:.\Generated_Source\PSoC5/SPIS_INT.c **** *
   5:.\Generated_Source\PSoC5/SPIS_INT.c **** * Description:
   6:.\Generated_Source\PSoC5/SPIS_INT.c **** *  This file provides all Interrupt Service Routine (ISR) for the SPI Slave
   7:.\Generated_Source\PSoC5/SPIS_INT.c **** *  component.
   8:.\Generated_Source\PSoC5/SPIS_INT.c **** *
   9:.\Generated_Source\PSoC5/SPIS_INT.c **** * Note:
  10:.\Generated_Source\PSoC5/SPIS_INT.c **** *  None.
  11:.\Generated_Source\PSoC5/SPIS_INT.c **** *
  12:.\Generated_Source\PSoC5/SPIS_INT.c **** ********************************************************************************
  13:.\Generated_Source\PSoC5/SPIS_INT.c **** * Copyright 2008-2015, Cypress Semiconductor Corporation.  All rights reserved.
  14:.\Generated_Source\PSoC5/SPIS_INT.c **** * You may use this file only in accordance with the license, terms, conditions,
  15:.\Generated_Source\PSoC5/SPIS_INT.c **** * disclaimers, and limitations in the end user license agreement accompanying
  16:.\Generated_Source\PSoC5/SPIS_INT.c **** * the software package with which this file was provided.
  17:.\Generated_Source\PSoC5/SPIS_INT.c **** *******************************************************************************/
  18:.\Generated_Source\PSoC5/SPIS_INT.c **** 
  19:.\Generated_Source\PSoC5/SPIS_INT.c **** #include "SPIS_PVT.h"
  20:.\Generated_Source\PSoC5/SPIS_INT.c **** #include "cyapicallbacks.h"
  21:.\Generated_Source\PSoC5/SPIS_INT.c **** 
  22:.\Generated_Source\PSoC5/SPIS_INT.c **** /* User code required at start of ISR */
  23:.\Generated_Source\PSoC5/SPIS_INT.c **** /* `#START SPIS_ISR_START_DEF` */
  24:.\Generated_Source\PSoC5/SPIS_INT.c **** 
  25:.\Generated_Source\PSoC5/SPIS_INT.c **** /* `#END` */
  26:.\Generated_Source\PSoC5/SPIS_INT.c **** 
  27:.\Generated_Source\PSoC5/SPIS_INT.c **** 
  28:.\Generated_Source\PSoC5/SPIS_INT.c **** /*******************************************************************************
  29:.\Generated_Source\PSoC5/SPIS_INT.c **** * Function Name: SPIS_TX_ISR
  30:.\Generated_Source\PSoC5/SPIS_INT.c **** *
  31:.\Generated_Source\PSoC5/SPIS_INT.c **** * Summary:
ARM GAS  C:\Users\jthem\AppData\Local\Temp\ccm5o87D.s 			page 2


  32:.\Generated_Source\PSoC5/SPIS_INT.c **** *  Interrupt Service Routine for TX portion of the SPI Slave.
  33:.\Generated_Source\PSoC5/SPIS_INT.c **** *
  34:.\Generated_Source\PSoC5/SPIS_INT.c **** * Parameters:
  35:.\Generated_Source\PSoC5/SPIS_INT.c **** *  None.
  36:.\Generated_Source\PSoC5/SPIS_INT.c **** *
  37:.\Generated_Source\PSoC5/SPIS_INT.c **** * Return:
  38:.\Generated_Source\PSoC5/SPIS_INT.c **** *  None.
  39:.\Generated_Source\PSoC5/SPIS_INT.c **** *
  40:.\Generated_Source\PSoC5/SPIS_INT.c **** * Global variables:
  41:.\Generated_Source\PSoC5/SPIS_INT.c **** *  SPIS_txBufferWrite - used for the account of the bytes which
  42:.\Generated_Source\PSoC5/SPIS_INT.c **** *  have been written down in the TX software buffer.
  43:.\Generated_Source\PSoC5/SPIS_INT.c **** *  SPIS_txBufferRead - used for the account of the bytes which
  44:.\Generated_Source\PSoC5/SPIS_INT.c **** *  have been read from the TX software buffer, modified when exist data to
  45:.\Generated_Source\PSoC5/SPIS_INT.c **** *  sending and FIFO Not Full.
  46:.\Generated_Source\PSoC5/SPIS_INT.c **** *  SPIS_txBuffer[SPIS_TX_BUFFER_SIZE] - used to store
  47:.\Generated_Source\PSoC5/SPIS_INT.c **** *  data to sending.
  48:.\Generated_Source\PSoC5/SPIS_INT.c **** *  All described above Global variables are used when Software Buffer is used.
  49:.\Generated_Source\PSoC5/SPIS_INT.c **** *
  50:.\Generated_Source\PSoC5/SPIS_INT.c **** *******************************************************************************/
  51:.\Generated_Source\PSoC5/SPIS_INT.c **** CY_ISR(SPIS_TX_ISR)
  52:.\Generated_Source\PSoC5/SPIS_INT.c **** {
  27              		.loc 1 52 0
  28              		.cfi_startproc
  29              		@ args = 0, pretend = 0, frame = 0
  30              		@ frame_needed = 1, uses_anonymous_args = 0
  31              		@ link register save eliminated.
  32 0000 80B4     		push	{r7}
  33              		.cfi_def_cfa_offset 4
  34              		.cfi_offset 7, -4
  35 0002 00AF     		add	r7, sp, #0
  36              		.cfi_def_cfa_register 7
  53:.\Generated_Source\PSoC5/SPIS_INT.c **** 
  54:.\Generated_Source\PSoC5/SPIS_INT.c ****     #if(SPIS_TX_SOFTWARE_BUF_ENABLED)
  55:.\Generated_Source\PSoC5/SPIS_INT.c ****         uint8 tmpStatus;
  56:.\Generated_Source\PSoC5/SPIS_INT.c ****     #endif /* (SPIS_TX_SOFTWARE_BUF_ENABLED) */
  57:.\Generated_Source\PSoC5/SPIS_INT.c **** 
  58:.\Generated_Source\PSoC5/SPIS_INT.c ****     #ifdef SPIS_TX_ISR_ENTRY_CALLBACK
  59:.\Generated_Source\PSoC5/SPIS_INT.c ****         SPIS_TX_ISR_EntryCallback();
  60:.\Generated_Source\PSoC5/SPIS_INT.c ****     #endif /* SPIS_TX_ISR_ENTRY_CALLBACK */
  61:.\Generated_Source\PSoC5/SPIS_INT.c **** 
  62:.\Generated_Source\PSoC5/SPIS_INT.c ****     /* User code required at start of ISR */
  63:.\Generated_Source\PSoC5/SPIS_INT.c ****     /* `#START SPIS_ISR_TX_START` */
  64:.\Generated_Source\PSoC5/SPIS_INT.c **** 
  65:.\Generated_Source\PSoC5/SPIS_INT.c ****     /* `#END` */
  66:.\Generated_Source\PSoC5/SPIS_INT.c **** 
  67:.\Generated_Source\PSoC5/SPIS_INT.c ****     #if(SPIS_TX_SOFTWARE_BUF_ENABLED)
  68:.\Generated_Source\PSoC5/SPIS_INT.c ****         /* Component interrupt service code */
  69:.\Generated_Source\PSoC5/SPIS_INT.c **** 
  70:.\Generated_Source\PSoC5/SPIS_INT.c ****         /* See if TX data buffer is not empty and there is space in TX FIFO */
  71:.\Generated_Source\PSoC5/SPIS_INT.c ****         while(SPIS_txBufferRead != SPIS_txBufferWrite)
  72:.\Generated_Source\PSoC5/SPIS_INT.c ****         {
  73:.\Generated_Source\PSoC5/SPIS_INT.c ****             tmpStatus = SPIS_GET_STATUS_TX(SPIS_swStatusTx);
  74:.\Generated_Source\PSoC5/SPIS_INT.c ****             SPIS_swStatusTx = tmpStatus;
  75:.\Generated_Source\PSoC5/SPIS_INT.c **** 
  76:.\Generated_Source\PSoC5/SPIS_INT.c ****             if ((SPIS_swStatusTx & SPIS_STS_TX_FIFO_NOT_FULL) != 0u)
  77:.\Generated_Source\PSoC5/SPIS_INT.c ****             {
  78:.\Generated_Source\PSoC5/SPIS_INT.c ****                 if(SPIS_txBufferFull == 0u)
ARM GAS  C:\Users\jthem\AppData\Local\Temp\ccm5o87D.s 			page 3


  79:.\Generated_Source\PSoC5/SPIS_INT.c ****                 {
  80:.\Generated_Source\PSoC5/SPIS_INT.c ****                    SPIS_txBufferRead++;
  81:.\Generated_Source\PSoC5/SPIS_INT.c **** 
  82:.\Generated_Source\PSoC5/SPIS_INT.c ****                     if(SPIS_txBufferRead >= SPIS_TX_BUFFER_SIZE)
  83:.\Generated_Source\PSoC5/SPIS_INT.c ****                     {
  84:.\Generated_Source\PSoC5/SPIS_INT.c ****                         SPIS_txBufferRead = 0u;
  85:.\Generated_Source\PSoC5/SPIS_INT.c ****                     }
  86:.\Generated_Source\PSoC5/SPIS_INT.c ****                 }
  87:.\Generated_Source\PSoC5/SPIS_INT.c ****                 else
  88:.\Generated_Source\PSoC5/SPIS_INT.c ****                 {
  89:.\Generated_Source\PSoC5/SPIS_INT.c ****                     SPIS_txBufferFull = 0u;
  90:.\Generated_Source\PSoC5/SPIS_INT.c ****                 }
  91:.\Generated_Source\PSoC5/SPIS_INT.c **** 
  92:.\Generated_Source\PSoC5/SPIS_INT.c ****                 /* Put data element into the TX FIFO */
  93:.\Generated_Source\PSoC5/SPIS_INT.c ****                 CY_SET_REG16(SPIS_TXDATA_PTR, 
  94:.\Generated_Source\PSoC5/SPIS_INT.c ****                                              SPIS_txBuffer[SPIS_txBufferRead]);
  95:.\Generated_Source\PSoC5/SPIS_INT.c ****             }
  96:.\Generated_Source\PSoC5/SPIS_INT.c ****             else
  97:.\Generated_Source\PSoC5/SPIS_INT.c ****             {
  98:.\Generated_Source\PSoC5/SPIS_INT.c ****                 break;
  99:.\Generated_Source\PSoC5/SPIS_INT.c ****             }
 100:.\Generated_Source\PSoC5/SPIS_INT.c ****         }
 101:.\Generated_Source\PSoC5/SPIS_INT.c **** 
 102:.\Generated_Source\PSoC5/SPIS_INT.c ****         /* If Buffer is empty then disable TX FIFO status interrupt until there is data in the buff
 103:.\Generated_Source\PSoC5/SPIS_INT.c ****         if(SPIS_txBufferRead == SPIS_txBufferWrite)
 104:.\Generated_Source\PSoC5/SPIS_INT.c ****         {
 105:.\Generated_Source\PSoC5/SPIS_INT.c ****             SPIS_TX_STATUS_MASK_REG &= ((uint8)~SPIS_STS_TX_FIFO_NOT_FULL);
 106:.\Generated_Source\PSoC5/SPIS_INT.c ****         }
 107:.\Generated_Source\PSoC5/SPIS_INT.c **** 
 108:.\Generated_Source\PSoC5/SPIS_INT.c ****     #endif /* SPIS_TX_SOFTWARE_BUF_ENABLED */
 109:.\Generated_Source\PSoC5/SPIS_INT.c **** 
 110:.\Generated_Source\PSoC5/SPIS_INT.c ****     /* User code required at end of ISR (Optional) */
 111:.\Generated_Source\PSoC5/SPIS_INT.c ****     /* `#START SPIS_ISR_TX_END` */
 112:.\Generated_Source\PSoC5/SPIS_INT.c **** 
 113:.\Generated_Source\PSoC5/SPIS_INT.c ****     /* `#END` */
 114:.\Generated_Source\PSoC5/SPIS_INT.c ****     
 115:.\Generated_Source\PSoC5/SPIS_INT.c ****     #ifdef SPIS_TX_ISR_EXIT_CALLBACK
 116:.\Generated_Source\PSoC5/SPIS_INT.c ****         SPIS_TX_ISR_ExitCallback();
 117:.\Generated_Source\PSoC5/SPIS_INT.c ****     #endif /* SPIS_TX_ISR_EXIT_CALLBACK */
 118:.\Generated_Source\PSoC5/SPIS_INT.c ****    }
  37              		.loc 1 118 0
  38 0004 BD46     		mov	sp, r7
  39              		.cfi_def_cfa_register 13
  40              		@ sp needed
  41 0006 5DF8047B 		ldr	r7, [sp], #4
  42              		.cfi_restore 7
  43              		.cfi_def_cfa_offset 0
  44 000a 7047     		bx	lr
  45              		.cfi_endproc
  46              	.LFE0:
  47              		.size	SPIS_TX_ISR, .-SPIS_TX_ISR
  48              		.section	.text.SPIS_RX_ISR,"ax",%progbits
  49              		.align	2
  50              		.global	SPIS_RX_ISR
  51              		.thumb
  52              		.thumb_func
  53              		.type	SPIS_RX_ISR, %function
ARM GAS  C:\Users\jthem\AppData\Local\Temp\ccm5o87D.s 			page 4


  54              	SPIS_RX_ISR:
  55              	.LFB1:
 119:.\Generated_Source\PSoC5/SPIS_INT.c **** 
 120:.\Generated_Source\PSoC5/SPIS_INT.c **** 
 121:.\Generated_Source\PSoC5/SPIS_INT.c **** /*******************************************************************************
 122:.\Generated_Source\PSoC5/SPIS_INT.c **** * Function Name: SPIS_RX_ISR
 123:.\Generated_Source\PSoC5/SPIS_INT.c **** *
 124:.\Generated_Source\PSoC5/SPIS_INT.c **** * Summary:
 125:.\Generated_Source\PSoC5/SPIS_INT.c **** *  Interrupt Service Routine for RX portion of the SPI Slave.
 126:.\Generated_Source\PSoC5/SPIS_INT.c **** *
 127:.\Generated_Source\PSoC5/SPIS_INT.c **** * Parameters:
 128:.\Generated_Source\PSoC5/SPIS_INT.c **** *  None.
 129:.\Generated_Source\PSoC5/SPIS_INT.c **** *
 130:.\Generated_Source\PSoC5/SPIS_INT.c **** * Return:
 131:.\Generated_Source\PSoC5/SPIS_INT.c **** *  None.
 132:.\Generated_Source\PSoC5/SPIS_INT.c **** *
 133:.\Generated_Source\PSoC5/SPIS_INT.c **** * Global variables:
 134:.\Generated_Source\PSoC5/SPIS_INT.c **** *  SPIS_rxBufferWrite - used for the account of the bytes which
 135:.\Generated_Source\PSoC5/SPIS_INT.c **** *  have been written down in the RX software buffer modified when FIFO contains
 136:.\Generated_Source\PSoC5/SPIS_INT.c **** *  new data.
 137:.\Generated_Source\PSoC5/SPIS_INT.c **** *  SPIS_rxBufferRead - used for the account of the bytes which
 138:.\Generated_Source\PSoC5/SPIS_INT.c **** *  have been read from the RX software buffer, modified when overflow occurred.
 139:.\Generated_Source\PSoC5/SPIS_INT.c **** *  SPIS_rxBuffer[SPIS_RX_BUFFER_SIZE] - used to store
 140:.\Generated_Source\PSoC5/SPIS_INT.c **** *  received data, modified when FIFO contains new data.
 141:.\Generated_Source\PSoC5/SPIS_INT.c **** *  All described above Global variables are used when Software Buffer is used.
 142:.\Generated_Source\PSoC5/SPIS_INT.c **** *
 143:.\Generated_Source\PSoC5/SPIS_INT.c **** *******************************************************************************/
 144:.\Generated_Source\PSoC5/SPIS_INT.c **** CY_ISR(SPIS_RX_ISR)
 145:.\Generated_Source\PSoC5/SPIS_INT.c **** {
  56              		.loc 1 145 0
  57              		.cfi_startproc
  58              		@ args = 0, pretend = 0, frame = 0
  59              		@ frame_needed = 1, uses_anonymous_args = 0
  60              		@ link register save eliminated.
  61 0000 80B4     		push	{r7}
  62              		.cfi_def_cfa_offset 4
  63              		.cfi_offset 7, -4
  64 0002 00AF     		add	r7, sp, #0
  65              		.cfi_def_cfa_register 7
 146:.\Generated_Source\PSoC5/SPIS_INT.c ****     #if(SPIS_RX_SOFTWARE_BUF_ENABLED)
 147:.\Generated_Source\PSoC5/SPIS_INT.c ****         uint8 tmpStatus;
 148:.\Generated_Source\PSoC5/SPIS_INT.c ****         uint16 rxData;
 149:.\Generated_Source\PSoC5/SPIS_INT.c ****     #endif /* (SPIS_TX_SOFTWARE_BUF_ENABLED) */
 150:.\Generated_Source\PSoC5/SPIS_INT.c **** 
 151:.\Generated_Source\PSoC5/SPIS_INT.c ****     #ifdef SPIS_RX_ISR_ENTRY_CALLBACK
 152:.\Generated_Source\PSoC5/SPIS_INT.c ****         SPIS_RX_ISR_EntryCallback();
 153:.\Generated_Source\PSoC5/SPIS_INT.c ****     #endif /* SPIS_RX_ISR_ENTRY_CALLBACK */
 154:.\Generated_Source\PSoC5/SPIS_INT.c **** 
 155:.\Generated_Source\PSoC5/SPIS_INT.c ****     /* User code required at start of ISR */
 156:.\Generated_Source\PSoC5/SPIS_INT.c ****     /* `#START SPIS_RX_ISR_START` */
 157:.\Generated_Source\PSoC5/SPIS_INT.c **** 
 158:.\Generated_Source\PSoC5/SPIS_INT.c ****     /* `#END` */
 159:.\Generated_Source\PSoC5/SPIS_INT.c ****     
 160:.\Generated_Source\PSoC5/SPIS_INT.c ****     #if(SPIS_RX_SOFTWARE_BUF_ENABLED)
 161:.\Generated_Source\PSoC5/SPIS_INT.c ****         tmpStatus = SPIS_GET_STATUS_RX(SPIS_swStatusRx);
 162:.\Generated_Source\PSoC5/SPIS_INT.c ****         SPIS_swStatusRx = tmpStatus;
 163:.\Generated_Source\PSoC5/SPIS_INT.c ****         /* See if RX data FIFO has some data and if it can be moved to the RX Buffer */
ARM GAS  C:\Users\jthem\AppData\Local\Temp\ccm5o87D.s 			page 5


 164:.\Generated_Source\PSoC5/SPIS_INT.c ****         while((SPIS_swStatusRx & SPIS_STS_RX_FIFO_NOT_EMPTY) != 0u)
 165:.\Generated_Source\PSoC5/SPIS_INT.c ****         {
 166:.\Generated_Source\PSoC5/SPIS_INT.c ****             rxData = CY_GET_REG16(SPIS_RXDATA_PTR);
 167:.\Generated_Source\PSoC5/SPIS_INT.c **** 
 168:.\Generated_Source\PSoC5/SPIS_INT.c ****             /* Set next pointer. */
 169:.\Generated_Source\PSoC5/SPIS_INT.c ****             SPIS_rxBufferWrite++;
 170:.\Generated_Source\PSoC5/SPIS_INT.c ****             if(SPIS_rxBufferWrite >= SPIS_RX_BUFFER_SIZE)
 171:.\Generated_Source\PSoC5/SPIS_INT.c ****             {
 172:.\Generated_Source\PSoC5/SPIS_INT.c ****                 SPIS_rxBufferWrite = 0u;
 173:.\Generated_Source\PSoC5/SPIS_INT.c ****             }
 174:.\Generated_Source\PSoC5/SPIS_INT.c **** 
 175:.\Generated_Source\PSoC5/SPIS_INT.c ****             if(SPIS_rxBufferWrite == SPIS_rxBufferRead)
 176:.\Generated_Source\PSoC5/SPIS_INT.c ****             {
 177:.\Generated_Source\PSoC5/SPIS_INT.c ****                 SPIS_rxBufferRead++;
 178:.\Generated_Source\PSoC5/SPIS_INT.c ****                 if(SPIS_rxBufferRead >= SPIS_RX_BUFFER_SIZE)
 179:.\Generated_Source\PSoC5/SPIS_INT.c ****                 {
 180:.\Generated_Source\PSoC5/SPIS_INT.c ****                     SPIS_rxBufferRead = 0u;
 181:.\Generated_Source\PSoC5/SPIS_INT.c ****                 }
 182:.\Generated_Source\PSoC5/SPIS_INT.c ****                 SPIS_rxBufferFull = 1u;
 183:.\Generated_Source\PSoC5/SPIS_INT.c ****             }
 184:.\Generated_Source\PSoC5/SPIS_INT.c **** 
 185:.\Generated_Source\PSoC5/SPIS_INT.c ****             /* Move data from the FIFO to the Buffer */
 186:.\Generated_Source\PSoC5/SPIS_INT.c ****             SPIS_rxBuffer[SPIS_rxBufferWrite] = rxData;
 187:.\Generated_Source\PSoC5/SPIS_INT.c **** 
 188:.\Generated_Source\PSoC5/SPIS_INT.c ****             tmpStatus = SPIS_GET_STATUS_RX(SPIS_swStatusRx);
 189:.\Generated_Source\PSoC5/SPIS_INT.c ****             SPIS_swStatusRx = tmpStatus;
 190:.\Generated_Source\PSoC5/SPIS_INT.c ****         }
 191:.\Generated_Source\PSoC5/SPIS_INT.c ****     #endif /* SPIS_RX_SOFTWARE_BUF_ENABLED */
 192:.\Generated_Source\PSoC5/SPIS_INT.c **** 
 193:.\Generated_Source\PSoC5/SPIS_INT.c ****     /* User code required at end of ISR (Optional) */
 194:.\Generated_Source\PSoC5/SPIS_INT.c ****     /* `#START SPIS_RX_ISR_END` */
 195:.\Generated_Source\PSoC5/SPIS_INT.c **** 
 196:.\Generated_Source\PSoC5/SPIS_INT.c ****     /* `#END` */
 197:.\Generated_Source\PSoC5/SPIS_INT.c **** 
 198:.\Generated_Source\PSoC5/SPIS_INT.c ****     #ifdef SPIS_RX_ISR_EXIT_CALLBACK
 199:.\Generated_Source\PSoC5/SPIS_INT.c ****         SPIS_RX_ISR_ExitCallback();
 200:.\Generated_Source\PSoC5/SPIS_INT.c ****     #endif /* SPIS_RX_ISR_EXIT_CALLBACK */
 201:.\Generated_Source\PSoC5/SPIS_INT.c **** }
  66              		.loc 1 201 0
  67 0004 BD46     		mov	sp, r7
  68              		.cfi_def_cfa_register 13
  69              		@ sp needed
  70 0006 5DF8047B 		ldr	r7, [sp], #4
  71              		.cfi_restore 7
  72              		.cfi_def_cfa_offset 0
  73 000a 7047     		bx	lr
  74              		.cfi_endproc
  75              	.LFE1:
  76              		.size	SPIS_RX_ISR, .-SPIS_RX_ISR
  77              		.text
  78              	.Letext0:
  79              		.section	.debug_info,"",%progbits
  80              	.Ldebug_info0:
  81 0000 A6000000 		.4byte	0xa6
  82 0004 0400     		.2byte	0x4
  83 0006 00000000 		.4byte	.Ldebug_abbrev0
  84 000a 04       		.byte	0x4
ARM GAS  C:\Users\jthem\AppData\Local\Temp\ccm5o87D.s 			page 6


  85 000b 01       		.uleb128 0x1
  86 000c E3000000 		.4byte	.LASF15
  87 0010 01       		.byte	0x1
  88 0011 45000000 		.4byte	.LASF16
  89 0015 8E000000 		.4byte	.LASF17
  90 0019 00000000 		.4byte	.Ldebug_ranges0+0
  91 001d 00000000 		.4byte	0
  92 0021 00000000 		.4byte	.Ldebug_line0
  93 0025 02       		.uleb128 0x2
  94 0026 01       		.byte	0x1
  95 0027 06       		.byte	0x6
  96 0028 8B010000 		.4byte	.LASF0
  97 002c 02       		.uleb128 0x2
  98 002d 01       		.byte	0x1
  99 002e 08       		.byte	0x8
 100 002f 80000000 		.4byte	.LASF1
 101 0033 02       		.uleb128 0x2
 102 0034 02       		.byte	0x2
 103 0035 05       		.byte	0x5
 104 0036 9D010000 		.4byte	.LASF2
 105 003a 02       		.uleb128 0x2
 106 003b 02       		.byte	0x2
 107 003c 07       		.byte	0x7
 108 003d 78010000 		.4byte	.LASF3
 109 0041 02       		.uleb128 0x2
 110 0042 04       		.byte	0x4
 111 0043 05       		.byte	0x5
 112 0044 DA000000 		.4byte	.LASF4
 113 0048 02       		.uleb128 0x2
 114 0049 04       		.byte	0x4
 115 004a 07       		.byte	0x7
 116 004b 33000000 		.4byte	.LASF5
 117 004f 02       		.uleb128 0x2
 118 0050 08       		.byte	0x8
 119 0051 05       		.byte	0x5
 120 0052 00000000 		.4byte	.LASF6
 121 0056 02       		.uleb128 0x2
 122 0057 08       		.byte	0x8
 123 0058 07       		.byte	0x7
 124 0059 69000000 		.4byte	.LASF7
 125 005d 03       		.uleb128 0x3
 126 005e 04       		.byte	0x4
 127 005f 05       		.byte	0x5
 128 0060 696E7400 		.ascii	"int\000"
 129 0064 02       		.uleb128 0x2
 130 0065 04       		.byte	0x4
 131 0066 07       		.byte	0x7
 132 0067 26000000 		.4byte	.LASF8
 133 006b 02       		.uleb128 0x2
 134 006c 04       		.byte	0x4
 135 006d 04       		.byte	0x4
 136 006e 97010000 		.4byte	.LASF9
 137 0072 02       		.uleb128 0x2
 138 0073 08       		.byte	0x8
 139 0074 04       		.byte	0x4
 140 0075 71010000 		.4byte	.LASF10
 141 0079 02       		.uleb128 0x2
ARM GAS  C:\Users\jthem\AppData\Local\Temp\ccm5o87D.s 			page 7


 142 007a 01       		.byte	0x1
 143 007b 08       		.byte	0x8
 144 007c D5000000 		.4byte	.LASF11
 145 0080 02       		.uleb128 0x2
 146 0081 04       		.byte	0x4
 147 0082 07       		.byte	0x7
 148 0083 A7010000 		.4byte	.LASF12
 149 0087 04       		.uleb128 0x4
 150 0088 1A000000 		.4byte	.LASF13
 151 008c 01       		.byte	0x1
 152 008d 33       		.byte	0x33
 153 008e 00000000 		.4byte	.LFB0
 154 0092 0C000000 		.4byte	.LFE0-.LFB0
 155 0096 01       		.uleb128 0x1
 156 0097 9C       		.byte	0x9c
 157 0098 04       		.uleb128 0x4
 158 0099 0E000000 		.4byte	.LASF14
 159 009d 01       		.byte	0x1
 160 009e 90       		.byte	0x90
 161 009f 00000000 		.4byte	.LFB1
 162 00a3 0C000000 		.4byte	.LFE1-.LFB1
 163 00a7 01       		.uleb128 0x1
 164 00a8 9C       		.byte	0x9c
 165 00a9 00       		.byte	0
 166              		.section	.debug_abbrev,"",%progbits
 167              	.Ldebug_abbrev0:
 168 0000 01       		.uleb128 0x1
 169 0001 11       		.uleb128 0x11
 170 0002 01       		.byte	0x1
 171 0003 25       		.uleb128 0x25
 172 0004 0E       		.uleb128 0xe
 173 0005 13       		.uleb128 0x13
 174 0006 0B       		.uleb128 0xb
 175 0007 03       		.uleb128 0x3
 176 0008 0E       		.uleb128 0xe
 177 0009 1B       		.uleb128 0x1b
 178 000a 0E       		.uleb128 0xe
 179 000b 55       		.uleb128 0x55
 180 000c 17       		.uleb128 0x17
 181 000d 11       		.uleb128 0x11
 182 000e 01       		.uleb128 0x1
 183 000f 10       		.uleb128 0x10
 184 0010 17       		.uleb128 0x17
 185 0011 00       		.byte	0
 186 0012 00       		.byte	0
 187 0013 02       		.uleb128 0x2
 188 0014 24       		.uleb128 0x24
 189 0015 00       		.byte	0
 190 0016 0B       		.uleb128 0xb
 191 0017 0B       		.uleb128 0xb
 192 0018 3E       		.uleb128 0x3e
 193 0019 0B       		.uleb128 0xb
 194 001a 03       		.uleb128 0x3
 195 001b 0E       		.uleb128 0xe
 196 001c 00       		.byte	0
 197 001d 00       		.byte	0
 198 001e 03       		.uleb128 0x3
ARM GAS  C:\Users\jthem\AppData\Local\Temp\ccm5o87D.s 			page 8


 199 001f 24       		.uleb128 0x24
 200 0020 00       		.byte	0
 201 0021 0B       		.uleb128 0xb
 202 0022 0B       		.uleb128 0xb
 203 0023 3E       		.uleb128 0x3e
 204 0024 0B       		.uleb128 0xb
 205 0025 03       		.uleb128 0x3
 206 0026 08       		.uleb128 0x8
 207 0027 00       		.byte	0
 208 0028 00       		.byte	0
 209 0029 04       		.uleb128 0x4
 210 002a 2E       		.uleb128 0x2e
 211 002b 00       		.byte	0
 212 002c 3F       		.uleb128 0x3f
 213 002d 19       		.uleb128 0x19
 214 002e 03       		.uleb128 0x3
 215 002f 0E       		.uleb128 0xe
 216 0030 3A       		.uleb128 0x3a
 217 0031 0B       		.uleb128 0xb
 218 0032 3B       		.uleb128 0x3b
 219 0033 0B       		.uleb128 0xb
 220 0034 27       		.uleb128 0x27
 221 0035 19       		.uleb128 0x19
 222 0036 11       		.uleb128 0x11
 223 0037 01       		.uleb128 0x1
 224 0038 12       		.uleb128 0x12
 225 0039 06       		.uleb128 0x6
 226 003a 40       		.uleb128 0x40
 227 003b 18       		.uleb128 0x18
 228 003c 9742     		.uleb128 0x2117
 229 003e 19       		.uleb128 0x19
 230 003f 00       		.byte	0
 231 0040 00       		.byte	0
 232 0041 00       		.byte	0
 233              		.section	.debug_aranges,"",%progbits
 234 0000 24000000 		.4byte	0x24
 235 0004 0200     		.2byte	0x2
 236 0006 00000000 		.4byte	.Ldebug_info0
 237 000a 04       		.byte	0x4
 238 000b 00       		.byte	0
 239 000c 0000     		.2byte	0
 240 000e 0000     		.2byte	0
 241 0010 00000000 		.4byte	.LFB0
 242 0014 0C000000 		.4byte	.LFE0-.LFB0
 243 0018 00000000 		.4byte	.LFB1
 244 001c 0C000000 		.4byte	.LFE1-.LFB1
 245 0020 00000000 		.4byte	0
 246 0024 00000000 		.4byte	0
 247              		.section	.debug_ranges,"",%progbits
 248              	.Ldebug_ranges0:
 249 0000 00000000 		.4byte	.LFB0
 250 0004 0C000000 		.4byte	.LFE0
 251 0008 00000000 		.4byte	.LFB1
 252 000c 0C000000 		.4byte	.LFE1
 253 0010 00000000 		.4byte	0
 254 0014 00000000 		.4byte	0
 255              		.section	.debug_line,"",%progbits
ARM GAS  C:\Users\jthem\AppData\Local\Temp\ccm5o87D.s 			page 9


 256              	.Ldebug_line0:
 257 0000 66000000 		.section	.debug_str,"MS",%progbits,1
 257      02003A00 
 257      00000201 
 257      FB0E0D00 
 257      01010101 
 258              	.LASF6:
 259 0000 6C6F6E67 		.ascii	"long long int\000"
 259      206C6F6E 
 259      6720696E 
 259      7400
 260              	.LASF14:
 261 000e 53504953 		.ascii	"SPIS_RX_ISR\000"
 261      5F52585F 
 261      49535200 
 262              	.LASF13:
 263 001a 53504953 		.ascii	"SPIS_TX_ISR\000"
 263      5F54585F 
 263      49535200 
 264              	.LASF8:
 265 0026 756E7369 		.ascii	"unsigned int\000"
 265      676E6564 
 265      20696E74 
 265      00
 266              	.LASF5:
 267 0033 6C6F6E67 		.ascii	"long unsigned int\000"
 267      20756E73 
 267      69676E65 
 267      6420696E 
 267      7400
 268              	.LASF16:
 269 0045 2E5C4765 		.ascii	".\\Generated_Source\\PSoC5\\SPIS_INT.c\000"
 269      6E657261 
 269      7465645F 
 269      536F7572 
 269      63655C50 
 270              	.LASF7:
 271 0069 6C6F6E67 		.ascii	"long long unsigned int\000"
 271      206C6F6E 
 271      6720756E 
 271      7369676E 
 271      65642069 
 272              	.LASF1:
 273 0080 756E7369 		.ascii	"unsigned char\000"
 273      676E6564 
 273      20636861 
 273      7200
 274              	.LASF17:
 275 008e 433A5C55 		.ascii	"C:\\Users\\jthem\\Documents\\PSoC Creator\\PWMExamp"
 275      73657273 
 275      5C6A7468 
 275      656D5C44 
 275      6F63756D 
 276 00bc 6C653031 		.ascii	"le01\\EasyBoard_5LP.cydsn\000"
 276      5C456173 
 276      79426F61 
 276      72645F35 
ARM GAS  C:\Users\jthem\AppData\Local\Temp\ccm5o87D.s 			page 10


 276      4C502E63 
 277              	.LASF11:
 278 00d5 63686172 		.ascii	"char\000"
 278      00
 279              	.LASF4:
 280 00da 6C6F6E67 		.ascii	"long int\000"
 280      20696E74 
 280      00
 281              	.LASF15:
 282 00e3 474E5520 		.ascii	"GNU C 4.9.3 20150303 (release) [ARM/embedded-4_9-br"
 282      4320342E 
 282      392E3320 
 282      32303135 
 282      30333033 
 283 0116 616E6368 		.ascii	"anch revision 221220] -mcpu=cortex-m3 -mthumb -g -O"
 283      20726576 
 283      6973696F 
 283      6E203232 
 283      31323230 
 284 0149 30202D66 		.ascii	"0 -ffunction-sections -ffat-lto-objects\000"
 284      66756E63 
 284      74696F6E 
 284      2D736563 
 284      74696F6E 
 285              	.LASF10:
 286 0171 646F7562 		.ascii	"double\000"
 286      6C6500
 287              	.LASF3:
 288 0178 73686F72 		.ascii	"short unsigned int\000"
 288      7420756E 
 288      7369676E 
 288      65642069 
 288      6E7400
 289              	.LASF0:
 290 018b 7369676E 		.ascii	"signed char\000"
 290      65642063 
 290      68617200 
 291              	.LASF9:
 292 0197 666C6F61 		.ascii	"float\000"
 292      7400
 293              	.LASF2:
 294 019d 73686F72 		.ascii	"short int\000"
 294      7420696E 
 294      7400
 295              	.LASF12:
 296 01a7 73697A65 		.ascii	"sizetype\000"
 296      74797065 
 296      00
 297              		.ident	"GCC: (GNU Tools for ARM Embedded Processors) 4.9.3 20150303 (release) [ARM/embedded-4_9-br
